pipeline {
    agent any

    stages {

        stage('Docker version rebuil') {
            agent {
                label 'ubuntu'
            }
            steps {
                sh "echo $USER"
                sh 'sudo chmod 777 /var/run/docker.sock'
                sh 'docker version'
            }
        }

        stage('Docker version master') {
            agent {
                label 'master'
            }
            steps {
                sh "echo $USER"
                sh 'docker version'
            }
        }

        stage('Build docker image') {
            steps {
                sh 'docker-compose build'
            }
        }

        stage('Push docker image to DockerHub') {
            steps{
                withDockerRegistry(credentialsId: 'docker-hub-cred', url: 'https://index.docker.io/v1/') {
                    sh '''
                        docker push danwhite123/nginx-image:latest && docker push danwhite123/apache-image:latest
                    '''
                }
            }
        }

        stage('Delete docker image locally') {
            steps{
                sh 'docker rmi danwhite123/nginx-image:latest && docker rmi danwhite123/apache-image:latest'
            }
        }

//         stage('Creating network for containers') {
//             agent {
//                 label 'ubuntu'
//             }
//             steps {
//                 sh 'docker network create my_network'
//             }
//         }

        stage('Creating or Deleting network for containers') {
            agent {
                label 'ubuntu'
            }
            steps {
                script {
                    // Check if the network exists
                    def networkExists = sh(script: 'docker network inspect my_network', returnStatus: true).trim() == 0 ? true : false

                    // If the network exists, delete it
                    if (networkExists) {
                        sh 'docker network rm my_network'
                        echo 'Existing network deleted.'
                    }

                    // Create the network
                    sh 'docker network create my_network'
                    echo 'Network created.'
                }
            }
        }

        stage('test') {
        agent {
                 label 'ubuntu'
                              }
         steps {
        script {
                    // Определение переменной
                    def condition = true

                    // Условный оператор
                    if (condition) {
                        echo 'Condition is true. Run some steps.'
                        // Добавьте ваши шаги здесь
                    } else {
                        echo 'Condition is false. Run alternative steps.'
                        // Добавьте альтернативные шаги здесь
                    }
                }
                }
        }

//         stage('Run docker container apache') {
//             agent {
//                 label 'ubuntu'
//             }
//             // Check if the Apache container exists
//             def apacheContainerExists = sh(script: 'docker ps -q -f name=apache', returnStatus: true).trim() == 0 ? false : true
//             steps {
//                 // Stop and remove the Apache container if it exists
//                 if (apacheContainerExists) {
//                     sh 'docker stop apache'
//                     sh 'docker rm apache'
//                     sh 'docker rmi danwhite123/apache-image:latest'
//                 }
//                 sh 'docker run -d -p 8080:80 --name apache --network=my_network danwhite123/apache-image:latest'
//             }
//         }
//
//         stage('Run docker container nginx') {
//             agent {
//                 label 'ubuntu'
//             }
//             steps {
//                 // Check if the Nginx container exists
//                 def nginxContainerExists = sh(script: 'docker ps -q -f name=nginx', returnStatus: true).trim() == 0 ? false : true
//
//                 // Stop and remove the Nginx container if it exists
//                 if (nginxContainerExists) {
//                     sh 'docker stop nginx'
//                     sh 'docker rm nginx'
//                     sh 'docker rmi danwhite123/nginx-image:latest'
//                 }
//                 sh 'docker run -d -p 80:80 --name nginx --network=my_network danwhite123/nginx-image:latest'
//             }
//         }

//         stage('Run Ansible Playbook') {
//             agent {
//                 label 'master'
//             }
//             steps {
//                 ansiblePlaybook(
//                     playbook: 'ansible/installer_of_docker_and_jdk.yml',
//                     inventory: 'ansible/hosts.txt',
//                     hostKeyChecking: 'false'
//                 )
//             }
//         }
    }
}